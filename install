#!/bin/bash
## settings...
DOT_FILES=".bash_itrc .bash_profile .bashrc .inputrc .tmux.conf .vimrc .ssh/ .gitconfig .gitignore.profiles.js .npmrc .config/"
BREW_PROGRAMS="bash coreutils findutils gcc ruby python python3 n neovim tmux git openssl openssh libevent libpng libtool wget cmake automake autoconf ssh-copy-id lolcat fortune thefuck"
PIP3_PROGRAMS=""
NPM_MODULES="gitignorer trash-cli tldr typescript json cowsay ncu"
BASH_IT_ALIAS="general fuck git clipboard"
BASH_IT_COMPLETIONS="bash-it brew git npm ssh system"
BASH_IT_PLUGINS="extract alias-completion"


## settings end

RED='\033[0;31m'
NC='\033[0m' # No Color
SCRIPT_PATH="`dirname \"$0\"`"

# abort on error
set -e

if [ "$1" == "--dry-run" ]; then
  echo "Dry run mode..."; echo
  DRY_RUN=1
fi

function run {
  echo "  > $1"
  if [ -z "$DRY_RUN" ]; then
    eval $1
  fi
}

function find_command {
  command -v git >/dev/null 2>&1 || { echo >&2 "git is required for this installation but it's not installed.  Aborting."; exit 1; }
  echo `command -v $1`
}

# check if git is installed
git_command=`find_command git`
# check if curl is installed
curl_command=`find_command curl`
# check if ruby is installed
ruby_command=`find_command ruby`






# install linuxbrew
echo "# Installing linuxbrew"
if [ ! -d "$HOME/.linuxbrew" ]; then
  # if ~/.linuxbrew doesn't exist
  brew_install="git clone https://github.com/Linuxbrew/brew $HOME/.linuxbrew"
  run "$brew_install"
fi

PATH="$HOME/.linuxbrew/bin:$PATH"
PATH="$HOME/.linuxbrew/sbin:$PATH"
MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
XDG_DATA_DIRS="$HOME/.linuxbrew/share:$XDG_DATA_DIRS"

brew_command=`which brew`
run "$brew_command update"

for pname in $BREW_PROGRAMS; do
  run "${brew_command} install ${pname}"
done



# install pip programs
echo "# Installing pip3 programs"
pip3_command=`which pip3`
for pname in $PIP3_PROGRAMS; do
  run "${pip3_command} install --user ${pname}"
done



# install node with n
echo "# Installing node with n"
if [ `stat -c %U /usr/local` != $USER ]; then
  run "sudo -k chown -R $USER /usr/local/"
fi
run "n lts"
run "n stable"

for pname in $NPM_MODULES; do
  echo "# Installing ${pname}"
  run "npm i -g ${pname}"
done





# install bash_it
echo "# Installing Bash-it"
bash_it_git="Bash-it/bash-it"
bash_it_location="${HOME}/.bash_it"
bash_it_clone="$git_command clone --depth=1 https://github.com/$bash_it_git.git ${bash_it_location}"
bash_it_install="${HOME}/.bash_it/install.sh --silent"
run "rm -rf ${bash_it_location}"
run "$bash_it_clone"
run "$bash_it_install"

set +e
BASH_IT=~/.bash_it
run "source $HOME/.bash_it/bash_it.sh"
set -e

for n in $BASH_IT_ALIAS; do
  run "bash-it enable alias ${n}"
done

for n in $BASH_IT_COMPLETIONS; do
  run "bash-it enable completion ${n}"
done

for n in $BASH_IT_PLUGINS; do
  run "bash-it enable plugin ${n}"
done






# copy dot files
for filename in $DOT_FILES; do
  echo "# Copying ${filename}"
  from_file="${SCRIPT_PATH}/${filename}"
  to_file="${HOME}/${filename}"
  copy_file="cp -a -r ${from_file} ${to_file}"
  backup_file="cp -a -r ${to_file} ${to_file}.backup"
  if [ -f "${to_file}" ]; then
    run "$backup_file"
  fi
  run "$copy_file"
  echo
done

# Set ~/.ssh/config to 600
run "chmod 600 $HOME/.ssh/config"






# vim plug
echo "# Installing vim plug"
vim_plug="$curl_command -fLo ${HOME}/.vim/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
run "$vim_plug"
run "vim +PlugInstall +qall"
echo

# vim youcompleteme
$HOME/.vim/plugged/youCompleteMe/install.py --js-completer




# cleaning up
echo -e "\n${RED}Please relogin to see changes.${NC}"
